<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo博客搭建教程]]></title>
    <url>%2F2018%2F11%2F08%2Fhexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[评论第三方集成服务-来必力Next主题自带，这里我使用的是 来必力，注册后获取 LiveRe UID，直接改主题配置文件1livere_uid: #your livere_uid 如果无法注册请科学上网，注册时会显示一堆韩文，大致意思是去邮箱看验证码 统计第三方集成服务-不蒜子统计Next主题自带，这里我使用的是 不蒜子统计，直接改主题配置文件12busuanzi_count: enable: true 搜索Next主题自带有hexo-generator-search插件直接在主题配置文件themes/next/_config.yml下修改配置即可12local_search: enable: true 图片资源文件引入source 资源文件夹（类似于全局）对于少量或者公用的文件，可以存放在source资源文件夹例如 source/images/test.jpg通过 ![](/images/test.jpg) 来访问它们 文章资源文件夹（按文章分类）修改配置文件 _config.yml1post_asset_folder: true 资源文件管理功能打开后，每次创建新文章都会自动创建一个资源文件夹。 相对路径引用例如 _posts/post_name/img/test.jpg通过 ![](./img/test.jpg) 来访问它们 CDN引用除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。将生成的地址直接拿来引用即可。![](https://nodejs.org/static/images/logo.svg)]]></content>
  </entry>
  <entry>
    <title><![CDATA[node环境搭建]]></title>
    <url>%2F2018%2F11%2F08%2Fnode%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[node环境搭建下载安装通过源码编译node下载地址1234$ wget https://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gz$ tar -zxvf node-v10.13.0.tar.gz$ cd node-v10.13.0$ make &amp;&amp; make install 通过安装包安装根据系统环境以及选择安装包node下载地址 通过yum（CentOS）1$ yum install -y nodejs 版本切换（通过npm）12$ npm i -g n$ n 10 // 切换到v10 npm加速（cnpm）12$ npm i -g cnpm$ cnpm i // 使用cnpm 代表 npm命令 项目常规编译流程123$ cd 项目目录$ npm install$ npm run build]]></content>
  </entry>
  <entry>
    <title><![CDATA[PHP Redis 使用教程]]></title>
    <url>%2F2018%2F11%2F07%2FPHP-Redis-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[PHP Redis使用教程日常使用Redis的过程中发现搜到的文档对于使用方法、返回值这些都不是很全，因此写个文档整理在一起方便查找。除了比较难找的，后面会分配时间将常用的也不断补全。 连接connect使用方法：$redis-&gt;connect($host, $port)返回值：被移除key的数量参数：host服务地址； port端口号 用途：切换redis库12$redis = new Redis();$redis-&gt;connect('127.0.0.1', 6379); select使用方法：$redis-&gt;select($db_number)返回值：被移除key的数量参数：库对应的数值用途：切换redis库123$redis = new Redis();$redis-&gt;connect('127.0.0.1', 6379);$redis-&gt;select(1); // 切换到1库 键（KEY）del使用方法：$redis-&gt;del($key)返回值：被移除key的数量参数：可以是单个键或者键数组用途：删除指定键（单个或者多个） 12345678&lt;?php// 单个删除$key = 'test';$redis-&gt;del($key); // 返回1，键不存在则返回0// 批量删除$key_array = [ 'test1', 'test2', 'test3' ];$result = $redis-&gt;del($key_array); // 返回3 set使用方法：$redis-&gt;set($key, $value)返回值：true | false用途：设置键对应的值 get使用方法：$redis-&gt;get($key)返回值：键对应的值用途：获取键对应的值 123456&lt;?php$key = 'name';$redis-&gt;set($key, 'xiaoming');$redis-&gt;get($key); // 返回 xiaoming exists使用方法：$redis-&gt;exists($key)返回值：true | false用途：判断键是否存在 setex使用方法：$redis-&gt;setex(‘key’, 3600, ‘value’);用途：设置一小时超时时间 setnx使用方法：$redis-&gt;setnx(‘key’, ‘value’);用途：将key的值设为value，当且仅当key不存在。 若给定的key已经存在，则SETNX不做任何动作。123456$result = $redis-&gt;setnx(&apos;key&apos;, &apos;value&apos;);var_dump($result); // 首次设置键，返回true$result = $redis-&gt;setnx(&apos;key&apos;, &apos;value1&apos;);var_dump($result); // 库内已存在键，返回false$result = $redis-&gt;get(&apos;key&apos;);var_dump($result); // 返回 value Hash（哈希表）hmset使用方法：$redis-&gt;hmset($key, $value_array);返回值：true | false用途：给哈希表批量赋值（键值对）123456$value_array = [ &apos;key1&apos; =&gt; &apos;value1&apos;, &apos;key2&apos; =&gt; &apos;value2&apos;, &apos;key3&apos; =&gt; &apos;value3&apos;,];$redis-&gt;hmset($key, $value_array); // 设置成功，返回true hmget使用方法：$redis-&gt;setex($key, $value_array);用途：批量获取hash表的值，返回键值对，无键为false1234567891011121314151617$value_array = [ &apos;key1&apos;, &apos;key4&apos;, &apos;key5&apos;,];$result = $redis-&gt;hmget($key, $value_array);var_dump($result);===== output =====array(3) &#123; [&quot;key1&quot;]=&gt; string(6) &quot;value1&quot; [&quot;key4&quot;]=&gt; bool(false) // 未设置键，返回false [&quot;key5&quot;]=&gt; bool(false) // 未设置键，返回false&#125; 参考文档redis中文手册PHP-redis中文文档phpredis中文手册——《redis中文手册》 php版]]></content>
      <tags>
        <tag>PHP Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git管理密钥配置]]></title>
    <url>%2F2018%2F11%2F03%2Fgit%E7%AE%A1%E7%90%86%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[git下载下载地址 git配置12git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱" 生成密钥12345ssh-keygen -t rsa -b 4096 -C "你的GitHub注册邮箱"Enter file in which to save the key // 密钥保存位置，回车默认Enter passphrase (empty for no passphrase): // 输入密码，直接回车Enter same passphrase again: // 输入确认密码，直接回车 github密钥管理github密钥管理直达链接1）New SSH Key，复制本地 ~/.ssh（window下为 C:\User\用户.ssh）的 id_rsa.pub2）Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去3）最后点击Add SSH key。 检验在Git Bash中检测GitHub公钥设置是否成功，输入ssh -T git@github.com 为不同网站应用各自的 SSH KEY编辑ssh配置 vim ~/.ssh/config追加以下内容123456789Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa_aHost git.oschina.net HostName git.oschina.net User git IdentityFile ~/.ssh/id_rsa_b]]></content>
  </entry>
</search>
